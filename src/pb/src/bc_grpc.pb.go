// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: src/bc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BrowserControl_OpenTab_FullMethodName           = "/pb.BrowserControl/OpenTab"
	BrowserControl_SetViewport_FullMethodName       = "/pb.BrowserControl/SetViewport"
	BrowserControl_ClickMouse_FullMethodName        = "/pb.BrowserControl/ClickMouse"
	BrowserControl_SendKeyboardInput_FullMethodName = "/pb.BrowserControl/SendKeyboardInput"
	BrowserControl_NavigateToUrl_FullMethodName     = "/pb.BrowserControl/NavigateToUrl"
	BrowserControl_TakeScreenshot_FullMethodName    = "/pb.BrowserControl/TakeScreenshot"
)

// BrowserControlClient is the client API for BrowserControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrowserControlClient interface {
	OpenTab(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Message, error)
	SetViewport(ctx context.Context, in *ViewportSize, opts ...grpc.CallOption) (*Message, error)
	ClickMouse(ctx context.Context, in *Coordinate, opts ...grpc.CallOption) (*Message, error)
	SendKeyboardInput(ctx context.Context, in *Text, opts ...grpc.CallOption) (*Message, error)
	NavigateToUrl(ctx context.Context, in *Url, opts ...grpc.CallOption) (*Message, error)
	TakeScreenshot(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Screenshot, error)
}

type browserControlClient struct {
	cc grpc.ClientConnInterface
}

func NewBrowserControlClient(cc grpc.ClientConnInterface) BrowserControlClient {
	return &browserControlClient{cc}
}

func (c *browserControlClient) OpenTab(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, BrowserControl_OpenTab_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *browserControlClient) SetViewport(ctx context.Context, in *ViewportSize, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, BrowserControl_SetViewport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *browserControlClient) ClickMouse(ctx context.Context, in *Coordinate, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, BrowserControl_ClickMouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *browserControlClient) SendKeyboardInput(ctx context.Context, in *Text, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, BrowserControl_SendKeyboardInput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *browserControlClient) NavigateToUrl(ctx context.Context, in *Url, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, BrowserControl_NavigateToUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *browserControlClient) TakeScreenshot(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Screenshot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Screenshot)
	err := c.cc.Invoke(ctx, BrowserControl_TakeScreenshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrowserControlServer is the server API for BrowserControl service.
// All implementations must embed UnimplementedBrowserControlServer
// for forward compatibility.
type BrowserControlServer interface {
	OpenTab(context.Context, *Empty) (*Message, error)
	SetViewport(context.Context, *ViewportSize) (*Message, error)
	ClickMouse(context.Context, *Coordinate) (*Message, error)
	SendKeyboardInput(context.Context, *Text) (*Message, error)
	NavigateToUrl(context.Context, *Url) (*Message, error)
	TakeScreenshot(context.Context, *Empty) (*Screenshot, error)
	mustEmbedUnimplementedBrowserControlServer()
}

// UnimplementedBrowserControlServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBrowserControlServer struct{}

func (UnimplementedBrowserControlServer) OpenTab(context.Context, *Empty) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenTab not implemented")
}
func (UnimplementedBrowserControlServer) SetViewport(context.Context, *ViewportSize) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetViewport not implemented")
}
func (UnimplementedBrowserControlServer) ClickMouse(context.Context, *Coordinate) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClickMouse not implemented")
}
func (UnimplementedBrowserControlServer) SendKeyboardInput(context.Context, *Text) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKeyboardInput not implemented")
}
func (UnimplementedBrowserControlServer) NavigateToUrl(context.Context, *Url) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NavigateToUrl not implemented")
}
func (UnimplementedBrowserControlServer) TakeScreenshot(context.Context, *Empty) (*Screenshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeScreenshot not implemented")
}
func (UnimplementedBrowserControlServer) mustEmbedUnimplementedBrowserControlServer() {}
func (UnimplementedBrowserControlServer) testEmbeddedByValue()                        {}

// UnsafeBrowserControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrowserControlServer will
// result in compilation errors.
type UnsafeBrowserControlServer interface {
	mustEmbedUnimplementedBrowserControlServer()
}

func RegisterBrowserControlServer(s grpc.ServiceRegistrar, srv BrowserControlServer) {
	// If the following call pancis, it indicates UnimplementedBrowserControlServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BrowserControl_ServiceDesc, srv)
}

func _BrowserControl_OpenTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserControlServer).OpenTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrowserControl_OpenTab_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserControlServer).OpenTab(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrowserControl_SetViewport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewportSize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserControlServer).SetViewport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrowserControl_SetViewport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserControlServer).SetViewport(ctx, req.(*ViewportSize))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrowserControl_ClickMouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Coordinate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserControlServer).ClickMouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrowserControl_ClickMouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserControlServer).ClickMouse(ctx, req.(*Coordinate))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrowserControl_SendKeyboardInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Text)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserControlServer).SendKeyboardInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrowserControl_SendKeyboardInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserControlServer).SendKeyboardInput(ctx, req.(*Text))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrowserControl_NavigateToUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Url)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserControlServer).NavigateToUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrowserControl_NavigateToUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserControlServer).NavigateToUrl(ctx, req.(*Url))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrowserControl_TakeScreenshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserControlServer).TakeScreenshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrowserControl_TakeScreenshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserControlServer).TakeScreenshot(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BrowserControl_ServiceDesc is the grpc.ServiceDesc for BrowserControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrowserControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BrowserControl",
	HandlerType: (*BrowserControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenTab",
			Handler:    _BrowserControl_OpenTab_Handler,
		},
		{
			MethodName: "SetViewport",
			Handler:    _BrowserControl_SetViewport_Handler,
		},
		{
			MethodName: "ClickMouse",
			Handler:    _BrowserControl_ClickMouse_Handler,
		},
		{
			MethodName: "SendKeyboardInput",
			Handler:    _BrowserControl_SendKeyboardInput_Handler,
		},
		{
			MethodName: "NavigateToUrl",
			Handler:    _BrowserControl_NavigateToUrl_Handler,
		},
		{
			MethodName: "TakeScreenshot",
			Handler:    _BrowserControl_TakeScreenshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/bc.proto",
}
